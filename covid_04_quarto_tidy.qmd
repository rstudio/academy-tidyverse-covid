---
title: "Tidy and join tables"
format: html
---

# Instructions

This week you learned about tidying and joining data sets with the tidyr (pronounced tidy-R) and dplyr packages.

Joining data sets can be deceptively tricky. It is important to keep in mind that prepping and inspecting the tables you're working with *before* you do a join is often more important (and takes more time) than doing the join itself.

You'll use some of these skills in the milestone to the right.

To learn more about the variables contained in the data set, refer to the data dictionary: https://rsacdn.link/milestones/internal/v2/covid/assets/covid_dictionary.html

Remember that all tidyverse packages have already been installed for you but you will need to *load* the ones you want to use.

# Milestone

```{r}
#| label: setup
#| include: false

# Load your packages here

```

## Tidy and join

In this milestone, you'll join two data sets to calculate the cumulative values of `deaths` and cumulative _proportion_ of `deaths` by state. 

To do this, you'll need to use the data in `covid_state_pop.csv` alongside the data you've been using in `covid.csv`. Both data sets are stored in your `data/` directory.

## Recreation

### Part 1 - Import

Before you begin, you will need to import your data sets. Use the code chunk below to read two data sets from the `data/` directory:

1. `covid.csv`, save it as `covid`
2. `covid_state_pop.csv`, save it as `covid_state_pop`

```{r}
#| label: recreation-import

```

### Part 2 - Join tables

Run the code below to see a table.

```{r}
#| label: recreate-this
#| message: false
solution <- readr::read_csv("data/milestone04.csv")
solution
```

Your task is to use what you've learned about the dplyr package to transform `covid` and `covid_state_pop` into this table. You will need to do some pre-join checks:

1. Which variables can you join on?
2. Do the data sets have any mismatched observations?
3. Do you need to clean either data set before joining?
4. Perform any necessary data cleaning, then check again.

Hint: you can use the `drop_na()` function from the tidyr package to remove missing values for a given column.

When you are satisfied with your data:
1. Join the cleaned data sets (or clean as part of your pipe)
2. Compute useful summaries grouped by `state`:
    - `cumul_deaths`, cumulative value of `deaths`
    - `cumul_prop_deaths`, cumulative proportion of `deaths` (i.e. cumulative `deaths` divided by the population)
3. Select the columns you need to re-create the above table

Work in the code chunk below. Save the result as `covid_cumul_prop`.

```{r}
#| label: recreation-join

```

Run the following code chunk to test whether you have the same answer as the solution:

```{r}
#| label: compare
#| eval: false
waldo::compare(covid_cumul_prop, solution, tolerance = 1e-4, ignore_attr = c("class", "groups"))
```

## Extension

Using the code chunk below, investigate a single research question about this data, using the skills you have learned this week and in previous weeks of Academy. Some ideas:

1. Create a visualization using the joined data from the milestone recreation. Use this visualization as the starting point for your own further investigation of the data. Use at least one data transformation step and one graph to start addressing your additional research question.
2. This week you added population data to each state. Incorporate this data into a research question of your choosing, and investigate your question using both data visualization and wrangling skills. (Example: Does _total_ state population impact the trajectory of `cases`, or `deaths`, within a state?)
3. Population is a starting point, but many other state-level data sets may be relevant to this project. Find another state-level variable, incorporate that into the project, and ask a question of the new data set. (Example: Does population _density_ impact the trajectory of `cases`, or `deaths`, within a state?)
4. [any other research question of interest]

Alternately, working with a data set of your own, complete the following:

1. Read in your data
2. Complete a data wrangling task relevant to your data (tidying and/or reshaping/pivoting your data); if appropriate, join your data with a second data set (filtering or mutating join)
3. Show summary tables of your data throughout these transformations


```{r}
#| label: extension

```
